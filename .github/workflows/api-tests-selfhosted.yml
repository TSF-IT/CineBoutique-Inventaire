name: API Integration Tests (self-hosted)

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.svg'
      - '**/*.gif'
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.svg'
      - '**/*.gif'
  workflow_dispatch:

concurrency:
  group: api-tests-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  tests:
    runs-on: [self-hosted, tsf-dsi, Linux, X64]
    timeout-minutes: 40

    permissions:
      contents: read
      checks: write

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: inv_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=30

    env:
      DOTNET_ENVIRONMENT: Development
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_DETAILED_ERRORS: "true"
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

      Serilog__MinimumLevel__Default: Debug
      Serilog__WriteTo__0__Name: Console
      Serilog__Enrich__FromLogContext: "true"

      Logging__Console__FormatterName: simple
      Logging__Console__IncludeScopes: "true"
      Logging__LogLevel__Default: Debug
      Logging__LogLevel__Microsoft: Information
      Logging__LogLevel__Microsoft.EntityFrameworkCore: Information
      Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command: Information

      TEST_DB_CONN: Host=127.0.0.1;Port=5432;Database=inv_test;Username=postgres;Password=postgres

    steps:
      - name: Pre-checkout clean (no sudo; use Docker if available)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -e
          echo "Workspace: $GITHUB_WORKSPACE"
          if command -v docker >/dev/null 2>&1; then
            echo "Cleaning with Docker (root in container)…"
            docker run --rm -v "$GITHUB_WORKSPACE":/ws alpine:3.20 sh -lc '
              set -e
              rm -rf /ws/* /ws/.[!.]* /ws/..?* 2>/dev/null || true
            '
          else
            echo "Docker non disponible; tentative en user-space…"
            rm -rf "$GITHUB_WORKSPACE"/* "$GITHUB_WORKSPACE"/.[!.]* "$GITHUB_WORKSPACE"/..?* 2>/dev/null || true
          fi
          echo "Pre-checkout clean terminé."

      - uses: actions/checkout@v4

      - name: Configure toolcache for setup-dotnet (user-space)
        run: |
          echo "RUNNER_TOOL_CACHE=$HOME/.cache/gha/_tool" >> "$GITHUB_ENV"
          echo "RUNNER_TEMP=$HOME/.cache/gha/_temp" >> "$GITHUB_ENV"
          mkdir -p "$HOME/.cache/gha/_tool" "$HOME/.cache/gha/_temp"

      - name: Force user-space install dir for .NET
        run: |
          echo "DOTNET_INSTALL_DIR=$HOME/.dotnet" >> "$GITHUB_ENV"
          echo "DOTNET_ROOT=$HOME/.dotnet" >> "$GITHUB_ENV"
          echo "$HOME/.dotnet" >> "$GITHUB_PATH"
          echo "$HOME/.dotnet/tools" >> "$GITHUB_PATH"

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        env:
          DOTNET_INSTALL_DIR: ${{ env.DOTNET_INSTALL_DIR }}
        with:
          dotnet-version: '8.0.x'
          cache: false

      - name: Verify dotnet availability
        run: |
          command -v dotnet
          dotnet --info

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Wait for Postgres service
        run: |
          for i in {1..90}; do
            (echo > /dev/tcp/127.0.0.1/5432) >/dev/null 2>&1 && break
            echo "Waiting for TCP 5432... ($i/90)"; sleep 1
          done
          docker run --rm --network host -e PGPASSWORD=postgres postgres:16-alpine \
            sh -lc 'for i in $(seq 1 60); do pg_isready -h 127.0.0.1 -p 5432 -U postgres && exit 0; echo "pg_isready... ($i/60)"; sleep 1; done; exit 1'

      - name: Ensure Postgres extensions
        run: |
          docker run --rm --network host -e PGPASSWORD=postgres postgres:16-alpine \
            psql -h 127.0.0.1 -p 5432 -U postgres -d inv_test -v "ON_ERROR_STOP=1" \
              -c 'CREATE EXTENSION IF NOT EXISTS pgcrypto;' \
              -c 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";' \
              -c 'CREATE EXTENSION IF NOT EXISTS citext;' \
              -c 'CREATE EXTENSION IF NOT EXISTS pg_trgm;'

      - name: Test (API)
        env:
          TEST_DB_CONN: ${{ env.TEST_DB_CONN }}
        run: |
          mkdir -p tests/inventory.api.tests/TestResults
          set -o pipefail
          dotnet test tests/inventory.api.tests/CineBoutique.Inventory.Api.Tests.csproj \
            -c Release --no-build \
            --logger "trx;LogFileName=test_results.trx" \
            --logger "console;verbosity=detailed" \
            --results-directory tests/inventory.api.tests/TestResults \
          2>&1 | tee tests/inventory.api.tests/TestResults/console.log

      - name: Publish test report (TRX)
        if: ${{ always() && hashFiles('tests/inventory.api.tests/TestResults/**/*.trx') != '' }}
        uses: dorny/test-reporter@v1
        with:
          name: API Tests
          path: tests/inventory.api.tests/TestResults/**/*.trx
          reporter: dotnet-trx
          fail-on-error: false

      - name: Upload artifacts (TRX + console)
        if: ${{ always() && hashFiles('tests/inventory.api.tests/TestResults/**/*.trx') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: api-test-artifacts
          path: |
            tests/inventory.api.tests/TestResults
            **/logs/**
            **/TestResults/**

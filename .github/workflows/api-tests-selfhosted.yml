name: API Integration Tests (self-hosted)

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: api-tests-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  tests:
    runs-on: [self-hosted, tsf, Linux, X64]
    timeout-minutes: 40
    permissions:
      contents: read
      checks: write

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: inv_test
        # Port hôte fixe = pas d'expressions ${ { } } qui dérangent le linter
        ports:
          - 127.0.0.1:15432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      TEST_DB_CONNECTION: Host=127.0.0.1;Port=15432;Database=inv_test;Username=postgres;Password=postgres
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
      - uses: actions/checkout@v4

      - name: Prepare .NET locations
        run: |
          echo "DOTNET_INSTALL_DIR=$RUNNER_TEMP/.dotnet" >> "$GITHUB_ENV"
          echo "DOTNET_ROOT=$RUNNER_TEMP/.dotnet" >> "$GITHUB_ENV"
          echo "$RUNNER_TEMP/.dotnet" >> "$GITHUB_PATH"
          echo "$RUNNER_TEMP/.dotnet/tools" >> "$GITHUB_PATH"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Wait for Postgres service
        run: |
          for i in {1..30}; do
            (echo > /dev/tcp/127.0.0.1/15432) >/dev/null 2>&1 && exit 0
            echo "Waiting for Postgres on 15432... ($i/30)"; sleep 2
          done
          echo "Postgres not ready"; exit 1

      - name: Test (all)
        run: |
          rm -rf test-results
          mkdir -p test-results
          dotnet test tests/inventory.api.tests/CineBoutique.Inventory.Api.Tests.csproj \
            -c Release --no-build \
            --logger "trx;LogFileName=tests.trx" \
            --results-directory "$GITHUB_WORKSPACE/test-results"

      # Petit coup de projecteur pour debug (ne fait pas échouer)
      - name: List TRX (debug)
        if: always()
        run: |
          echo "TRX files under $GITHUB_WORKSPACE/test-results:"
          find "$GITHUB_WORKSPACE/test-results" -type f -name "*.trx" -print || true

      - name: Publish test report (TRX)
        # On publie le rapport seulement si des fichiers existent,
        # ainsi le job ne casse pas sur "No test report files were found"
        if: always() && hashFiles('test-results/**/*.trx') != ''
        uses: dorny/test-reporter@v1
        with:
          name: API Tests
          path: test-results/**/*.trx
          reporter: dotnet-trx
          fail-on-error: false

      - name: Upload raw TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-trx
          path: test-results

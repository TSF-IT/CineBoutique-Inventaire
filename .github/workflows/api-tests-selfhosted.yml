name: API Integration Tests (self-hosted)

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: api-tests-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  tests:
    runs-on: [self-hosted, tsf, Linux, X64]
    timeout-minutes: 40

    permissions:
      contents: read
      checks: write

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: inv_test
        # Port fixe (évite l'utilisation de job.services[...] qui faisait râler le linter)
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=30

    env:
      ASPNETCORE_ENVIRONMENT: Development
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DISABLE_SERILOG: "true"
      TEST_DB_CONNECTION: Host=127.0.0.1;Port=5432;Database=inv_test;Username=postgres;Password=postgres

    steps:
      - uses: actions/checkout@v4

      # Installe .NET dans un dossier "user" (pas de sudo) + répertoire NuGet local
      - name: Prepare .NET install dir (user-writable) + NuGet cache dir
        run: |
          echo "DOTNET_INSTALL_DIR=$HOME/.dotnet"          >> "$GITHUB_ENV"
          echo "DOTNET_ROOT=$HOME/.dotnet"                 >> "$GITHUB_ENV"
          echo "NUGET_PACKAGES=$HOME/.nuget/packages"      >> "$GITHUB_ENV"
          mkdir -p "$HOME/.dotnet" "$HOME/.nuget/packages"

      # IMPORTANT : pas de 'cache: true' (sinon l'action exige packages.lock.json)
      - name: Setup .NET (no cache)
        uses: actions/setup-dotnet@v4
        env:
          DOTNET_INSTALL_DIR: ${{ env.DOTNET_INSTALL_DIR }}
        with:
          dotnet-version: '8.0.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'

      - name: Verify dotnet
        run: |
          echo "${DOTNET_INSTALL_DIR}" >> "$GITHUB_PATH"
          echo "${DOTNET_INSTALL_DIR}/tools" >> "$GITHUB_PATH"
          dotnet --info

      - uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props', '**/Directory.Build.props') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Wait for Postgres service
        run: |
          for i in {1..60}; do
            (echo > /dev/tcp/127.0.0.1/5432) >/dev/null 2>&1 && exit 0
            echo "Waiting for Postgres... ($i/60)"; sleep 1
          done
          echo "Postgres not ready"; exit 1

      - name: Test (API)
        env:
          TEST_DB_CONNECTION: ${{ env.TEST_DB_CONNECTION }}
        run: |
          mkdir -p tests/inventory.api.tests/TestResults
          dotnet test tests/inventory.api.tests/CineBoutique.Inventory.Api.Tests.csproj \
            -c Release --no-build \
            --logger "trx;LogFileName=test_results.trx" \
            --logger "console;verbosity=detailed" \
            --results-directory tests/inventory.api.tests/TestResults

      # Ces deux steps ne se lancent que si des TRX existent
      - name: Publish test report (TRX)
        if: ${{ always() && hashFiles('tests/inventory.api.tests/TestResults/**/*.trx') != '' }}
        uses: dorny/test-reporter@v1
        with:
          name: API Tests
          path: tests/inventory.api.tests/TestResults/**/*.trx
          reporter: dotnet-trx
          fail-on-error: false

      - name: Upload artifacts (TRX + logs éventuels)
        if: ${{ always() && hashFiles('tests/inventory.api.tests/TestResults/**/*.trx') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: api-test-artifacts
          path: |
            tests/inventory.api.tests/TestResults
            **/logs/**
            **/TestResults/**

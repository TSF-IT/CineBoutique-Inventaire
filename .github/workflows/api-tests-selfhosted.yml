name: API Integration Tests

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    branches:
      - '**'
    types: [opened, synchronize, reopened, ready_for_review]
  merge_group:
  workflow_dispatch:

concurrency:
  group: api-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    permissions:
      contents: read

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: inv_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      TEST_DB_CONN: Host=localhost;Port=5432;Database=inv_test;Username=postgres;Password=postgres
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_INSTALL_DIR: ${{ runner.temp }}/.dotnet
      DOTNET_ROOT: ${{ runner.temp }}/.dotnet
      DOTNET_NOLOGO: 1

    steps:
      - name: Checkout repository
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout pull request head
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        env:
          DOTNET_INSTALL_DIR: ${{ env.DOTNET_INSTALL_DIR }}
        with:
          dotnet-version: '8.0.414'
          cache: true

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Run domain tests
        run: dotnet test tests/inventory.domain.tests/CineBoutique.Inventory.Domain.Tests.csproj -c Release --no-build

      - name: Install Postgres client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Wait for Postgres service
        shell: bash
        run: |
          for i in {1..30}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres && exit 0
            echo "Waiting for Postgres... ($i/30)"; sleep 2
          done
          echo "Postgres not ready"; exit 1

      - name: Test API (integration)
        run: dotnet test tests/inventory.api.tests/CineBoutique.Inventory.Api.Tests.csproj -c Release --no-build --logger "trx;LogFileName=test_results.trx"

      - name: Publish TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-trx
          path: tests/inventory.api.tests/TestResults

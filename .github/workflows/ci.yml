name: "CI (Self-hosted)"

on:
  push:
    branches: [ "main" ]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  domain-tests:
    name: "Domain Tests"
    runs-on: [self-hosted, Linux, X64, tsf, docker]
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_ROLL_FORWARD: Major
    steps:
      - name: "Pre-clean: take ownership of workspace"
        run: |
          docker run --rm \
            -v "$GITHUB_WORKSPACE":/work \
            alpine:3.20 \
            sh -lc "chown -R $(id -u):$(id -g) /work || true"

      - uses: actions/checkout@v4

      - name: "Install .NET 8 locally (no sudo)"
        shell: bash
        env:
          DOTNET_DIR: ${{ github.workspace }}/.dotnet
        run: |
          set -eux
          mkdir -p "$DOTNET_DIR"
          curl -sSL https://dot.net/v1/dotnet-install.sh -o dotnet-install.sh
          bash dotnet-install.sh --channel 8.0 --install-dir "$DOTNET_DIR"
          echo "DOTNET_ROOT=$DOTNET_DIR" >> "$GITHUB_ENV"
          echo "$DOTNET_DIR" >> "$GITHUB_PATH"
          export DOTNET_ROOT="$DOTNET_DIR"
          export PATH="$DOTNET_DIR:$PATH"
          "$DOTNET_DIR/dotnet" --info

      - name: "Run Domain tests (direct)"
        shell: bash
        env:
          DOTNET_ROOT: ${{ github.workspace }}/.dotnet
          PATH: ${{ github.workspace }}/.dotnet:${{ env.PATH }}
        run: |
          set -eux
          dotnet restore CineBoutique.Inventory.sln
          dotnet build CineBoutique.Inventory.sln -c Release --no-restore
          dotnet test tests/inventory.domain.tests -c Release --no-build --logger "trx;LogFileName=domain-tests.trx"

      - name: "Publish test results (Domain)"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: domain-test-results
          path: |
            **/TestResults/*.trx
            **/TestResults/*.xml
          if-no-files-found: ignore

  api-tests:
    name: "API Tests (with Testcontainers/Postgres)"
    runs-on: [self-hosted, Linux, X64, tsf, docker]
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_ROLL_FORWARD: Major
      TEST_DB_CONNECTION: ""
    # Option B (Postgres service) : décommenter pour utiliser un service partagé
    # services:
    #   postgres:
    #     image: postgres:16-alpine
    #     ports:
    #       - 5432:5432
    #     env:
    #       POSTGRES_DB: inventory_tests
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: postgres
    #     options: >-
    #       --health-cmd="pg_isready -U postgres"
    #       --health-interval=10s
    #       --health-timeout=5s
    #       --health-retries=5
    steps:
      - name: "Pre-clean: take ownership of workspace"
        run: |
          docker run --rm \
            -v "$GITHUB_WORKSPACE":/work \
            alpine:3.20 \
            sh -lc "chown -R $(id -u):$(id -g) /work || true"

      - uses: actions/checkout@v4

      - name: "Install .NET 8 locally (no sudo)"
        shell: bash
        env:
          DOTNET_DIR: ${{ github.workspace }}/.dotnet
        run: |
          set -eux
          mkdir -p "$DOTNET_DIR"
          curl -sSL https://dot.net/v1/dotnet-install.sh -o dotnet-install.sh
          bash dotnet-install.sh --channel 8.0 --install-dir "$DOTNET_DIR"
          echo "DOTNET_ROOT=$DOTNET_DIR" >> "$GITHUB_ENV"
          echo "$DOTNET_DIR" >> "$GITHUB_PATH"
          export DOTNET_ROOT="$DOTNET_DIR"
          export PATH="$DOTNET_DIR:$PATH"
          "$DOTNET_DIR/dotnet" --info

      - name: "Show Docker"
        run: |
          docker version || true
          docker images  || true

      - name: "Restore"
        env:
          PATH: ${{ github.workspace }}/.dotnet:${{ env.PATH }}
        run: dotnet restore CineBoutique.Inventory.sln

      - name: "Build (Release)"
        env:
          PATH: ${{ github.workspace }}/.dotnet:${{ env.PATH }}
        run: dotnet build CineBoutique.Inventory.sln -c Release --no-restore

      - name: "Run API tests"
        working-directory: tests/inventory.api.tests
        env:
          PATH: ${{ github.workspace }}/.dotnet:${{ env.PATH }}
        run: dotnet test -c Release --no-build --logger "trx;LogFileName=api-tests.trx"

      - name: "Publish test results (API)"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: |
            **/TestResults/*.trx
            **/TestResults/*.xml
          if-no-files-found: ignore

  frontend:
    name: "Frontend (Vite + Playwright in container)"
    runs-on: [self-hosted, Linux, X64, tsf, docker]
    steps:
      - name: "Pre-clean: take ownership of workspace"
        run: |
          docker run --rm \
            -v "$GITHUB_WORKSPACE":/work \
            alpine:3.20 \
            sh -lc "chown -R $(id -u):$(id -g) /work || true"

      - uses: actions/checkout@v4

      - name: "Run web build + tests inside Playwright container (non-root)"
        working-directory: src/inventory-web
        env:
          CI: "true"
        run: |
          UID_GID="$(id -u):$(id -g)"
          docker run --rm \
            --ipc=host \
            --dns=1.1.1.1 \
            -u "$UID_GID" \
            -v "$PWD":/work \
            -w /work \
            mcr.microsoft.com/playwright:v1.47.0-jammy \
            bash -lc '
              set -eux
              node -v
              npm -v
              npm ci
              npm run build
              npx playwright install
              npx playwright test --reporter=list
            '

      - name: "Normalize permissions (post)"
        if: always()
        run: |
          docker run --rm \
            -v "$GITHUB_WORKSPACE":/work \
            alpine:3.20 \
            sh -lc "chown -R $(id -u):$(id -g) /work || true"

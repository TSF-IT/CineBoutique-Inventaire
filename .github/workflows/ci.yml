name: ci
on: [push, pull_request, workflow_dispatch]
env:
  AppSettings__SeedOnStartup: true

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
      - name: Pre-checkout clean (no sudo; use Docker if available)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -e
          echo "Workspace: $GITHUB_WORKSPACE"
          if command -v docker >/dev/null 2>&1; then
            echo "Cleaning with Docker (root in container)…"
            docker run --rm -v "$GITHUB_WORKSPACE":/ws alpine:3.20 sh -lc '
              set -e
              # Supprimer tout, y compris fichiers cachés (sauf . et ..)
              rm -rf /ws/* /ws/.[!.]* /ws/..?* 2>/dev/null || true
            '
          else
            echo "Docker non disponible; tentative en user-space…"
            rm -rf "$GITHUB_WORKSPACE"/* "$GITHUB_WORKSPACE"/.[!.]* "$GITHUB_WORKSPACE"/..?* 2>/dev/null || true
          fi
          echo "Pre-checkout clean terminé."

      - uses: actions/checkout@v4

      - name: Install .NET 8 SDK (user-space in $HOME/.dotnet)
        shell: bash
        run: |
          set -euo pipefail
          DOTNET_DIR="$HOME/.dotnet"
          export DOTNET_ROOT="$DOTNET_DIR"

          # Nettoyage éventuel d'une précédente install user-space
          if [ -d "$DOTNET_DIR" ]; then
            rm -rf "$DOTNET_DIR/sdk/8.0."* \
                  "$DOTNET_DIR/shared/Microsoft.NETCore.App/8.0."* \
                  "$DOTNET_DIR/host" 2>/dev/null || true
          fi

          mkdir -p "$DOTNET_DIR"
          echo "Installing .NET 8 SDK into $DOTNET_DIR"
          install_script="dotnet-install.sh"
          rm -f "$install_script"
          curl -fSLo "$install_script" --retry 5 --retry-delay 5 --retry-all-errors https://dot.net/v1/dotnet-install.sh
          chmod +x "$install_script"
          bash "$install_script" --channel 8.0 --install-dir "$DOTNET_DIR" --no-path
          test -x "$DOTNET_DIR/dotnet" || (echo "dotnet binary missing in $DOTNET_DIR" && ls -la "$DOTNET_DIR" && exit 1)

          # Rendre disponibles pour TOUTES les étapes suivantes
          echo "DOTNET_ROOT=$DOTNET_DIR" >> "$GITHUB_ENV"
          echo "$DOTNET_DIR" >> "$GITHUB_PATH"
          echo "$DOTNET_DIR/tools" >> "$GITHUB_PATH"

      - name: Verify dotnet availability
        shell: bash
        run: |
          ls -la "$HOME/.dotnet" || true
          command -v dotnet || true
          dotnet --info

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Enable SeedOnStartup (migrations + seed)
        run: echo "AppSettings__SeedOnStartup=true" >> "$GITHUB_ENV"

      - name: Test (.NET) -> TRX
        run: |
          rm -rf test-results/dotnet
          mkdir -p test-results/dotnet
          dotnet test -c Release --no-build \
            --logger "trx;LogFileName=tests.trx" \
            --results-directory "test-results/dotnet" \
            --collect:"XPlat Code Coverage"

      - name: Installer ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Ajouter .dotnet/tools au PATH
        run: echo "$HOME/.dotnet/tools" >> "$GITHUB_PATH"

      - name: Générer la couverture .NET
        shell: bash
        run: |
          set -euo pipefail
          report_root="test-results/dotnet"
          coverage_glob="$report_root/**/coverage.cobertura.xml"
          if ! compgen -G "$coverage_glob" > /dev/null; then
            echo "Aucun fichier de couverture Cobertura trouvé dans $report_root" >&2
            exit 1
          fi
          mkdir -p "$report_root/coverage-report"
          reportgenerator \
            "-reports:$coverage_glob" \
            "-targetdir:$report_root/coverage-report" \
            "-reporttypes:HtmlInline;Cobertura"

      - name: Publier la couverture .NET
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-coverage
          path: test-results/dotnet/coverage-report/**

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: src/inventory-web/package-lock.json

      - name: Install web dependencies
        working-directory: src/inventory-web
        run: npm ci

      - name: Run web tests (+ coverage)
        working-directory: src/inventory-web
        run: |
          npm test -- --coverage
          if [ -d coverage ]; then
            mkdir -p "$GITHUB_WORKSPACE/test-results/web"
            cp -R coverage "$GITHUB_WORKSPACE/test-results/web/"
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-test-results
          path: |
            test-results/dotnet/**/*.trx
            test-results/web/**

  e2e-web:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.49.1-jammy
      options: --user root
    needs: build-and-test
    steps:
      - name: Pre-checkout clean (no sudo; use Docker if available)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -e
          echo "Workspace: $GITHUB_WORKSPACE"
          if command -v docker >/dev/null 2>&1; then
            echo "Cleaning with Docker (root in container)…"
            docker run --rm -v "$GITHUB_WORKSPACE":/ws alpine:3.20 sh -lc '
              set -e
              # Supprimer tout, y compris fichiers cachés (sauf . et ..)
              rm -rf /ws/* /ws/.[!.]* /ws/..?* 2>/dev/null || true
            '
          else
            echo "Docker non disponible; tentative en user-space…"
            rm -rf "$GITHUB_WORKSPACE"/* "$GITHUB_WORKSPACE"/.[!.]* "$GITHUB_WORKSPACE"/..?* 2>/dev/null || true
          fi
          echo "Pre-checkout clean terminé."

      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: src/inventory-web/package-lock.json

      - name: Installer les dépendances web
        working-directory: src/inventory-web
        run: npm ci

      - name: Installer les dépendances OS pour Playwright (Linux uniquement)
        if: runner.os == 'Linux'
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: src/inventory-web
        run: |
          apt-get update
          npx playwright install-deps chromium

      - name: Installer Playwright (navigateurs)
        working-directory: src/inventory-web
        run: npx playwright install chromium

      - name: Build web
        working-directory: src/inventory-web
        run: npm run build

      - name: Générer des certificats TLS éphémères pour l'e2e
        working-directory: src/inventory-web
        run: |
          set -euo pipefail
          CERT_DIR="tests/e2e/certs"
          mkdir -p "$CERT_DIR"
          # S'assurer qu'openssl est présent (les runners Ubuntu en disposent ;
          # si image/container particulier : on l'installe)
          if ! command -v openssl >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y openssl
          fi
          # Certificat auto-signé CN=localhost, valable 1 jour (éphémère)
          openssl req -x509 -nodes -newkey rsa:2048 \
            -keyout "$CERT_DIR/localhost-key.pem" \
            -out    "$CERT_DIR/localhost.pem" \
            -subj "/CN=localhost" -days 1
          chmod 600 "$CERT_DIR/localhost-key.pem"

      - name: Exécuter les tests e2e
        working-directory: src/inventory-web
        run: npx playwright test

      - name: Artefacts Playwright
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: src/inventory-web/playwright-report/**

      - name: Restore host ownership after container job (no sudo)
        if: runner.os == 'Linux' && always()
        shell: bash
        run: |
          if command -v docker >/dev/null 2>&1; then
            HOST_UID=$(stat -c "%u" "$GITHUB_WORKSPACE")
            HOST_GID=$(stat -c "%g" "$GITHUB_WORKSPACE")
            echo "Restoring ownership to ${HOST_UID}:${HOST_GID} via Docker…"
            docker run --rm -e HOST_UID -e HOST_GID -v "$GITHUB_WORKSPACE":/ws alpine:3.20 sh -lc '
              chown -R "${HOST_UID}:${HOST_GID}" /ws 2>/dev/null || true
            '
          else
            echo "Docker non dispo; skip chown."
          fi

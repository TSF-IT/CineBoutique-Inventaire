name: ci
on: [push, pull_request, workflow_dispatch]

env:
  AppSettings__SeedOnStartup: true

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      ASPNETCORE_ENVIRONMENT: CI
      DOTNET_ENVIRONMENT: CI
      AppSettings__SeedOnStartup: true
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      PGPORT: 5432
      ConnectionStrings__Default: Host=localhost;Port=5432;Database=inventory;Username=postgres;Password=postgres
      ConnectionStrings__Inventory: Host=localhost;Port=5432;Database=inventory;Username=postgres;Password=postgres
      InventoryDb__ConnectionString: Host=localhost;Port=5432;Database=inventory;Username=postgres;Password=postgres
      Database__ConnectionString: Host=localhost;Port=5432;Database=inventory;Username=postgres;Password=postgres
      AppSettings__Db__ConnectionString: Host=localhost;Port=5432;Database=inventory;Username=postgres;Password=postgres

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PostgreSQL (no container)
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: 16
          database: inventory

      - name: Init CI DB user/password (mirror docker-compose env)
        shell: bash
        run: |
          # Crée/MAJ le superuser 'postgres' + droits sur DB 'inventory' (heredoc littéral = pas d'expansion)
          psql -d postgres <<'SQL'
          DO $do$
          BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='postgres') THEN
              CREATE ROLE postgres WITH LOGIN SUPERUSER PASSWORD 'postgres';
            ELSE
              ALTER ROLE postgres WITH PASSWORD 'postgres';
            END IF;
          END
          $do$;
          GRANT ALL PRIVILEGES ON DATABASE inventory TO postgres;
          SQL

      - name: Sanity check DB (inventory)
        shell: bash
        run: |
          psql -d inventory -c "select current_database(), current_user;"

      - name: Wait for PostgreSQL
        shell: bash
        run: |
          for i in {1..30}; do
            if psql -d postgres -c 'select 1' >/dev/null 2>&1; then
              echo "DB ready"; exit 0;
            fi
            sleep 1
          done
          echo "DB not ready in time"; exit 1

      - name: Setup .NET from global.json
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json
          cache: true
          cache-dependency-path: |
            Directory.Packages.props
            **/*.csproj

      - name: Export DB env (build the conn string with mapped port)
        run: |
          echo "PGPORT=5432" >> $GITHUB_ENV
          echo "ConnectionStrings__Default=Host=127.0.0.1;Port=5432;Database=inventory;Username=postgres;Password=postgres" >> $GITHUB_ENV
          echo "TEST_DB_CONN=Host=127.0.0.1;Port=5432;Database=inventory;Username=postgres;Password=postgres" >> $GITHUB_ENV

      - name: Dotnet info
        run: |
          which dotnet
          dotnet --info
          dotnet --list-sdks
          dotnet --list-runtimes

      - name: Restore
        run: dotnet restore --verbosity minimal

      - name: Build
        run: dotnet build --no-restore -c Release

      - name: Test (.NET) - TRX + couverture
        run: |
          rm -rf test-results/dotnet
          mkdir -p test-results/dotnet
          dotnet test --no-build -c Release \
            --logger "trx;LogFileName=test.trx" \
            --results-directory "test-results/dotnet" \
            --collect:"XPlat Code Coverage;Format=cobertura"

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            src/inventory-web/package-lock.json

      - name: Install web deps
        run: |
          npm --version
          npm ci --prefix src/inventory-web

      - name: Typecheck web
        run: npm run typecheck --prefix src/inventory-web

      - name: Build web
        run: npm run build --prefix src/inventory-web

      - name: ReportGenerator (HTML)
        run: |
          # Installer l'outil et l'ajouter au PATH
          dotnet tool install --global dotnet-reportgenerator-globaltool
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

          # Debug : montre les fichiers réellement présents
          find test-results/dotnet -type f -name "coverage.cobertura.xml" -print

          # IMPORTANT : le ';' doit être QUOTÉ pour ne pas être interprété par bash
          reportgenerator \
            -reports:'test-results/dotnet/**/coverage.cobertura.xml' \
            -targetdir:'test-results/dotnet/coverage-report' \
            -reporttypes:'HtmlInline;Cobertura'

      - name: Upload TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-trx
          path: test-results/dotnet/**/*.trx

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: test-results/dotnet/coverage-report/**

name: ci
on: [push, pull_request, workflow_dispatch]

env:
  AppSettings__SeedOnStartup: true

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        ports:
          - 5432/tcp
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cineboutique
        options: >-
          --health-cmd "pg_isready -U postgres -d cineboutique"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 30
          --name ci-postgres

    env:
      ASPNETCORE_ENVIRONMENT: CI
      DOTNET_ENVIRONMENT: CI
      AppSettings__SeedOnStartup: true
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET from global.json
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json
          cache: true
          cache-dependency-path: |
            Directory.Packages.props
            **/*.csproj

      - name: Export DB env (build the conn string with mapped port)
        run: |
          echo "PGPORT=${{ job.services.postgres.ports['5432'] }}" >> $GITHUB_ENV
          echo "ConnectionStrings__Default=Host=127.0.0.1;Port=${{ job.services.postgres.ports['5432'] }};Database=cineboutique;Username=postgres;Password=postgres" >> $GITHUB_ENV
          echo "TEST_DB_CONN=Host=127.0.0.1;Port=${{ job.services.postgres.ports['5432'] }};Database=cineboutique;Username=postgres;Password=postgres" >> $GITHUB_ENV

      - name: Dotnet info
        run: |
          which dotnet
          dotnet --info
          dotnet --list-sdks
          dotnet --list-runtimes

      - name: Restore
        run: dotnet restore --verbosity minimal

      - name: Build
        run: dotnet build --no-restore -c Release

      - name: Test (.NET) - TRX + couverture
        run: |
          rm -rf test-results/dotnet
          mkdir -p test-results/dotnet
          dotnet test --no-build -c Release \
            --logger "trx;LogFileName=test.trx" \
            --results-directory "test-results/dotnet" \
            --collect:"XPlat Code Coverage;Format=cobertura"

      - name: Install ReportGenerator (global tool)
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: ReportGenerator (HTML)
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          # (optionnel) aide debug : lister les fichiers trouv√©s
          find . -type f -name "coverage.cobertura.xml" -print || true
          reportgenerator \
            -reports:'**/TestResults/**/coverage.cobertura.xml' \
            -targetdir:test-results/dotnet/coverage-report \
            -reporttypes:HtmlInline;Cobertura

      - name: Upload TRX
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-trx
          path: test-results/dotnet/**/*.trx

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: test-results/dotnet/coverage-report/**

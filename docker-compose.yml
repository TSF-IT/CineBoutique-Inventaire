services:
  db:
    image: postgres:16-alpine
    container_name: cineboutique-inventaire-db-1
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventory
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d inventory"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - inventory-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  api:
    build:
      context: .
      dockerfile: src/inventory-api/Dockerfile
      target: final
    container_name: cineboutique-inventaire-api-1
    depends_on:
      db:
        condition: service_healthy
    environment:
      ASPNETCORE_URLS: "http://+:8080"
      ASPNETCORE_ENVIRONMENT: "Docker"
      ASPNETCORE_FORWARDEDHEADERS_ENABLED: "true"
      Logging__LogLevel__Default: "Information"
      Logging__LogLevel__Microsoft: "Information"
      ConnectionStrings__Default: Host=db;Port=5432;Database=inventory;Username=postgres;Password=postgres
      APPLY_MIGRATIONS: "true"
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  web:
    build:
      context: src/inventory-web
      dockerfile: Dockerfile
      target: stage-1
    container_name: cineboutique-inventaire-web-1
    depends_on:
      - api
    ports:
      - "5173:80"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --tries=1 -T 3 --spider http://127.0.0.1/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  proxy:
    image: caddy:2-alpine
    container_name: cineboutique-inventaire-proxy-1
    depends_on:
      - web
      - api
    environment:
      DOMAIN: ${DOMAIN:-}
      ACME_EMAIL: ${ACME_EMAIL:-}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./build/proxy/start.sh:/etc/caddy/start.sh:ro
      - ./certs:/certs:ro
    command: ["/bin/sh", "/etc/caddy/start.sh"]
    restart: unless-stopped

volumes:
  inventory-data:

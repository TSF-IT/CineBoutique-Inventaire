services:
  db:
    image: postgres:16-alpine
    container_name: inventory-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventory
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d inventory"]
      interval: 5s
      timeout: 3s
      retries: 20

  api:
    build:
      context: .
      dockerfile: ./src/inventory-api/Dockerfile
    container_name: inventory-api
    depends_on:
      db:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      ConnectionStrings__Default: "Host=db;Port=5432;Database=inventory;Username=postgres;Password=postgres"
      APPLY_MIGRATIONS: "true"
      DISABLE_MIGRATIONS: "false"
      AllowedOrigins__0: "https://${PUBLIC_HOST}"
      AllowedOrigins__1: "https://${DOMAIN}"
      AllowedOrigins__2: "http://localhost:5173"
    expose:
      - "8080"

  web:
    build:
      context: ./src/inventory-web
      dockerfile: Dockerfile
    container_name: inventory-web
    depends_on:
      - api
    expose:
      - "80"

  proxy:
    image: caddy:2.8.4-alpine
    container_name: inventory-proxy
    depends_on:
      - api
      - web
    ports:
      - "80:80"
      - "443:443"
    environment:
      DOMAIN: "${DOMAIN}"
      PUBLIC_HOST: "${PUBLIC_HOST}"
      ACME_EMAIL: "${ACME_EMAIL}"
      ACME_STAGING: "${ACME_STAGING:-0}"
      API_UPSTREAM: "http://api:8080"
      WEB_UPSTREAM: "http://web:80"
    volumes:
      - ./build/proxy/start.sh:/start.sh:ro
      - caddy_data:/data
      - caddy_config:/config
    command: ["/bin/sh", "/start.sh"]

volumes:
  dbdata:
  caddy_data:
  caddy_config:

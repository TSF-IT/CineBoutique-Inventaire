services:
  db:
    image: postgres:16-alpine
    container_name: inventory-db
    ports:
      - "55432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventory
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d inventory || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: src/inventory-api/Dockerfile
    container_name: inventory-api
    depends_on:
      db:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
      ASPNETCORE_DETAILEDERRORS: "true"
      ConnectionStrings__Default: "Host=db;Port=5432;Database=inventory;Username=postgres;Password=postgres;Include Error Detail=true"
      APPLY_MIGRATIONS: "true"
      DISABLE_MIGRATIONS: "false"
      AppSettings__SeedOnStartup: "true"
      DISABLE_SERILOG: "false"
    expose:
      - "8080"   # visible par 'web' via le réseau docker, pas publié vers l'hôte
    restart: unless-stopped
    # Pas de healthcheck ici: il est désormais défini dans l'image (Dockerfile)

  web:
    build:
      context: ./src/inventory-web
      dockerfile: Dockerfile
    container_name: inventory-web
    depends_on:
      api:
        condition: service_healthy   # attend que l'API passe healthy (grâce au HEALTHCHECK image)
    environment:
      PUBLIC_HOST: ${PUBLIC_HOST}
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped

volumes:
  dbdata:

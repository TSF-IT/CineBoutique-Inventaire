# Nginx sert la SPA en HTTPS avec un certificat auto-signé
# et reverse-proxie /api vers le backend "api:8080".

# HTTP -> HTTPS
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    return 301 https://$host$request_uri;
}

# Upgrade mapping (websocket/keep-alive)
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name _;

    # Certificat auto-signé généré au démarrage par /docker-entrypoint.d/50-ssl-selfsigned.sh
    ssl_certificate     /etc/nginx/certs/self.crt;
    ssl_certificate_key /etc/nginx/certs/self.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    # Un peu de tuning
    gzip on;
    gzip_types text/plain text/css application/json application/javascript application/octet-stream application/xml+rss image/svg+xml;
    client_max_body_size 10m;
    server_tokens off;

    # ---------- API ----------
    location /api/ {
        # IMPORTANT : on ne réécrit pas /api côté upstream, l’API écoute déjà avec le préfixe /api
        proxy_pass         http://api:8080;
        proxy_http_version 1.1;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $remote_addr;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   Upgrade           $http_upgrade;
        proxy_set_header   Connection        $connection_upgrade;
    }

    # Confort
    location = /health  { proxy_pass http://api:8080/health; }
    location  /swagger  { proxy_pass http://api:8080/swagger; }

    # ---------- SPA ----------
    root   /usr/share/nginx/html;
    index  index.html;
    try_files $uri $uri/ /index.html;
}
